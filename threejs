<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kaleidoscope with GUI Controls</title>
    <style>
        body { margin: 0; overflow: hidden; background-color: #111; }
        canvas { display: block; }
        #info {
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 14px;
            z-index: 100;
            pointer-events: none; /* Allow clicks to pass through to canvas */
        }
        /* Basic styling for lil-gui */
        :root {
            --lil-gui-background-color: #1f1f1f;
            --lil-gui-text-color: #ebebeb;
            --lil-gui-title-background-color: #111111;
            --lil-gui-title-text-color: #ebebeb;
            --lil-gui-widget-color: #424242;
            --lil-gui-hover-color: #4f4f4f;
            --lil-gui-focus-color: #5a5a5a;
            --lil-gui-number-color: #2cc9ff;
            --lil-gui-string-color: #b9ff2c;
        }
    </style>
</head>
<body>
    <div id="info">Kaleidoscope with GUI Controls - Adjust parameters on the right!</div>
    <canvas id="kaleidoscopeCanvas"></canvas>

    <script async src="https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js"></script>

    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.164.1/build/three.module.js",
                "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.164.1/examples/jsm/",
                "lil-gui": "https://cdn.jsdelivr.net/npm/lil-gui@0.19.1/dist/lil-gui.esm.js"
            }
        }
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import GUI from 'lil-gui';

        let scene, camera, renderer, controls, gui;
        let kaleidoscopeGroup; 
        const sourceObjects = []; 
        let isUserDragging = false;
        
        const params = {
            numSegments: 6,       
            objectCount: 8,       
            objectSize: 1.5,      
            spread: 4.5, 
            autoRotateSpeed: 0.0005, 
            objectWorldRotateSpeed: 0.005, 
            objectDriftSpeed: 0.008, 
            objectPersonalRotateSpeed: 0.008, 
            userDragSpeedMultiplier: 6.4 
        };

        const colors = [
            new THREE.Color(0xff007f), new THREE.Color(0x00ffdd), 
            new THREE.Color(0xffcc00), new THREE.Color(0x7f00ff),  
            new THREE.Color(0xff5733), new THREE.Color(0x33ff57),
            new THREE.Color(0x007bff) 
        ];

        function init() {
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x111111);

            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);
            camera.position.set(0, 0, 25); 

            const canvas = document.getElementById('kaleidoscopeCanvas');
            renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);

            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true; 
            controls.dampingFactor = 0.05;
            controls.minDistance = 5;      
            controls.maxDistance = 50;     
            controls.autoRotate = false;   

            controls.addEventListener('start', () => { isUserDragging = true; });
            controls.addEventListener('end', () => { isUserDragging = false; });

            const ambientLight = new THREE.AmbientLight(0xffffff, 0.7); 
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
            directionalLight.position.set(5, 10, 7.5); 
            scene.add(directionalLight);

            kaleidoscopeGroup = new THREE.Group();
            scene.add(kaleidoscopeGroup);

            createSourceSegmentObjects(); // Create initial objects
            buildKaleidoscopePattern();   // Build initial pattern

            setupGUI(); // Setup the GUI controls

            window.addEventListener('resize', onWindowResize);
            animate();
        }

        function setupGUI() {
            gui = new GUI();
            gui.title("Kaleidoscope Controls");

            const structureFolder = gui.addFolder('Structure');
            structureFolder.add(params, 'numSegments', 2, 20, 1).name('Segments').onFinishChange(() => {
                buildKaleidoscopePattern();
            });
            structureFolder.add(params, 'objectCount', 1, 20, 1).name('Object Count').onFinishChange(() => {
                createSourceSegmentObjects();
                buildKaleidoscopePattern();
            });
            structureFolder.add(params, 'objectSize', 0.5, 3.0, 0.1).name('Object Max Size').onFinishChange(() => {
                // Recreating objects is needed as size is set at creation
                createSourceSegmentObjects();
                buildKaleidoscopePattern();
            });
            structureFolder.add(params, 'spread', 1, 10, 0.1).name('Object Spread').onFinishChange(() => {
                // Recreating objects is needed as spread affects initial positions
                createSourceSegmentObjects();
                buildKaleidoscopePattern();
            });
            // structureFolder.open(); // Keep it open by default

            const animationFolder = gui.addFolder('Animation');
            animationFolder.add(params, 'autoRotateSpeed', 0, 0.005, 0.0001).name('Auto Rotate Speed');
            animationFolder.add(params, 'objectWorldRotateSpeed', 0, 0.02, 0.001).name('Obj World Spin');
            animationFolder.add(params, 'objectDriftSpeed', 0, 0.05, 0.001).name('Obj Drift Speed');
            animationFolder.add(params, 'objectPersonalRotateSpeed', 0, 0.05, 0.001).name('Obj Tumble Speed');
            animationFolder.add(params, 'userDragSpeedMultiplier', 1.0, 10.0, 0.1).name('Drag Speed Boost');
            // animationFolder.open();
        }


        function createSourceSegmentObjects() {
            // Dispose old objects if any (not strictly necessary here as we just replace the array)
            sourceObjects.forEach(obj => {
                if (obj.geometry) obj.geometry.dispose();
                if (obj.material) {
                     if (Array.isArray(obj.material)) {
                        obj.material.forEach(mat => mat.dispose());
                    } else {
                        obj.material.dispose();
                    }
                }
            });
            sourceObjects.length = 0; 

            for (let i = 0; i < params.objectCount; i++) {
                let geometry;
                const randShape = Math.random();
                if (randShape > 0.65) { 
                    geometry = new THREE.BoxGeometry(
                        Math.random() * params.objectSize + 0.3, 
                        Math.random() * params.objectSize + 0.3, 
                        Math.random() * params.objectSize + 0.3  
                    );
                } else if (randShape > 0.25) { 
                    geometry = new THREE.SphereGeometry(
                        Math.random() * (params.objectSize / 2) + 0.2, 16, 12  
                    );
                } else { 
                     geometry = new THREE.TorusKnotGeometry(
                        (Math.random() * params.objectSize * 0.35) + 0.2, 
                        (Math.random() * params.objectSize * 0.12) + 0.05, 
                        64, 8, Math.floor(Math.random()*2)+2, Math.floor(Math.random()*2)+3
                    );
                }
                
                const material = new THREE.MeshStandardMaterial({
                    color: colors[Math.floor(Math.random() * colors.length)],
                    roughness: 0.3, metalness: 0.2,
                    emissive: colors[Math.floor(Math.random() * colors.length)],
                    emissiveIntensity: 0.12 
                });
                const mesh = new THREE.Mesh(geometry, material);

                mesh.position.set(
                    (Math.random() - 0.5) * params.spread, 
                    (Math.random() - 0.5) * params.spread, 
                    (Math.random() - 0.5) * (params.spread / 2)  
                );
                mesh.rotation.set(
                    Math.random() * Math.PI * 2, Math.random() * Math.PI * 2, Math.random() * Math.PI * 2
                );
                
                mesh.userData.baseVelocity = new THREE.Vector3(
                    (Math.random() - 0.5), (Math.random() - 0.5), (Math.random() - 0.5) * 0.5 
                ).normalize(); // Will be scaled by objectDriftSpeed in animate

                mesh.userData.baseRotationSpeed = new THREE.Vector3(
                    (Math.random() - 0.5), (Math.random() - 0.5), (Math.random() - 0.5)
                ).normalize(); // Will be scaled by objectPersonalRotateSpeed in animate
                
                mesh.userData.worldRotationAxis = new THREE.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();
                mesh.userData.worldRotationSpeedFactor = (Math.random() - 0.5) * 2; // Will be scaled by objectWorldRotateSpeed

                sourceObjects.push(mesh); 
            }
        }

        function buildKaleidoscopePattern() {
            while (kaleidoscopeGroup.children.length) {
                const segmentToRemove = kaleidoscopeGroup.children[0];
                completeDisposalLogic(segmentToRemove); 
                kaleidoscopeGroup.remove(segmentToRemove);
            }

            const angleIncrement = (Math.PI * 2) / params.numSegments;

            for (let i = 0; i < params.numSegments; i++) {
                const segmentGroup = new THREE.Group(); 
                sourceObjects.forEach(originalMesh => {
                    const clone = originalMesh.clone(); 
                    clone.userData = { 
                        ...originalMesh.userData,
                        baseVelocity: originalMesh.userData.baseVelocity.clone(),
                        baseRotationSpeed: originalMesh.userData.baseRotationSpeed.clone(),
                        worldRotationAxis: originalMesh.userData.worldRotationAxis.clone()
                     };
                    segmentGroup.add(clone);
                });
                segmentGroup.rotation.z = i * angleIncrement;
                if (i % 2 === 1) { segmentGroup.scale.y = -1; }
                kaleidoscopeGroup.add(segmentGroup);
            }
        }
        
        function completeDisposalLogic(object) {
             object.traverse(child => {
                if (child.isMesh) {
                    if (child.geometry) child.geometry.dispose();
                    if (child.material) {
                        if (Array.isArray(child.material)) {
                            child.material.forEach(mat => mat.dispose());
                        } else {
                            child.material.dispose();
                        }
                    }
                }
            });
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function animate() {
            requestAnimationFrame(animate); 
            controls.update(); 

            if (params.autoRotateSpeed !== 0) {
                kaleidoscopeGroup.rotation.z += params.autoRotateSpeed;
            }

            const speedMultiplier = isUserDragging ? params.userDragSpeedMultiplier : 1.0;

            sourceObjects.forEach(obj => {
                const effectiveDriftSpeed = params.objectDriftSpeed * speedMultiplier;
                const currentDrift = obj.userData.baseVelocity.clone().multiplyScalar(effectiveDriftSpeed);
                obj.position.add(currentDrift);

                const effectivePersonalRotateSpeed = params.objectPersonalRotateSpeed * speedMultiplier;
                obj.rotation.x += obj.userData.baseRotationSpeed.x * effectivePersonalRotateSpeed;
                obj.rotation.y += obj.userData.baseRotationSpeed.y * effectivePersonalRotateSpeed;
                obj.rotation.z += obj.userData.baseRotationSpeed.z * effectivePersonalRotateSpeed;

                const boundary = params.spread / 2 + 0.5; 
                ['x', 'y', 'z'].forEach(axis => {
                    if (obj.position[axis] > boundary || obj.position[axis] < -boundary) {
                        obj.userData.baseVelocity[axis] *= -1; 
                        obj.position[axis] = Math.max(-boundary, Math.min(boundary, obj.position[axis])); 
                    }
                });
            });

            kaleidoscopeGroup.children.forEach((segment) => { 
                segment.children.forEach((clone, objectIndex) => { 
                    if (clone.isMesh && sourceObjects[objectIndex]) {
                        const sourceObj = sourceObjects[objectIndex];
                        clone.position.copy(sourceObj.position);
                        clone.rotation.copy(sourceObj.rotation);
                        
                        if (clone.userData.worldRotationAxis && clone.userData.worldRotationSpeedFactor) {
                             const effectiveWorldSpin = params.objectWorldRotateSpeed * clone.userData.worldRotationSpeedFactor * speedMultiplier;
                             clone.rotateOnWorldAxis(clone.userData.worldRotationAxis, effectiveWorldSpin);
                        }
                    }
                });
            });

            renderer.render(scene, camera); 
        }
        
        init();
    </script>
</body>
</html>
